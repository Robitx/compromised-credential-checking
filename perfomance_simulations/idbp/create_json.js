// Generated by CoffeeScript 2.3.2
(function() {
  var EC, NgramProb, crypto, ec, ecc, fs, readline, zlib;

  fs = require('fs');

  zlib = require('zlib');

  readline = require('readline');

  crypto = require('crypto');

  ecc = require('elliptic');

  EC = ecc.ec;

  ec = new EC('secp256k1');

  NgramProb = class NgramProb {
    constructor(filename) {
      this.get_hash_enc = this.get_hash_enc.bind(this);
      this.store_json = this.store_json.bind(this);
      this.print_ngram = this.print_ngram.bind(this);
      this.filename = filename;
      this.userpassdict = {};
      this.key = ec.genKeyPair();
      this.lineReader = readline.createInterface({
        input: fs.createReadStream(this.filename)
      });
    }

    save_key() {
      return fs.writeFileSync('key.txt', this.key.getPrivate('hex'));
    }
   
    trim(s) {
      return (s || '').replace(/^\s+|\s+$/g, '');
    }

    get_hash_enc(username, password) {
      var hash_prefix, key_user, msg, pass_list, pass_set, public_key, str;
      str = username.concat(password);
      msg = crypto.createHash("sha256").update(str).digest('hex');
      key_user = ec.keyFromPrivate(msg, 'hex');
      public_key = key_user.getPublic().mul(this.key.getPrivate()).encode('hex');
      hash_prefix = msg.slice(0, 4);
      if (!this.userpassdict[hash_prefix]) {
        pass_list = [public_key];
        return this.userpassdict[hash_prefix] = pass_list;
      } else {
        pass_set = new Set(this.userpassdict[hash_prefix]);
        if (!pass_set.has(public_key)) {
          return this.userpassdict[hash_prefix].push(public_key);
        }
      }
    }

    store_json() {
      var i, startTime;
      i = 0;
      startTime = new Date();
      this.lineReader.on('line', (line) => {
        var endTime, timeDiff, words;
        if (i % 1000000 === 0) {
          endTime = new Date();
          timeDiff = endTime - startTime;
          timeDiff /= 1000;
          console.log(timeDiff);
          console.log(i);
        }
        words = this.trim(line.toString()).split('\t');
        this.get_hash_enc(words[0], words[1]);
        return i = i + 1;
      });
      return this.lineReader.on('close', () => {
        var endTime, res, timeDiff;
        endTime = new Date();
        timeDiff = endTime - startTime;
        timeDiff /= 1000;
        console.log(timeDiff);
        res = JSON.stringify(this.userpassdict);
        console.log("json created");
        fs.writeFileSync('username_pass_10m.json', res);
        return console.log("stored");
      });
    }

    print_ngram() {
      console.log("here");
      console.log(this.ngrams[123]);
      return console.log("done");
    }

  };

  module.exports = NgramProb;

}).call(this);
