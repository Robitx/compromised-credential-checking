// Generated by CoffeeScript 2.3.2
(async function() {
  var EC, argon2, crypto, ec, ecc, elapsed, fs, get_hash, hash, key, key_user, msg, password, prkey, public_key, start, str, username;
 var async = require("async");

  crypto = require('crypto');

  ecc = require('elliptic');

  fs = require('fs');

  argon2 = require('argon2');

  EC = ecc.ec;

  ec = new EC('secp256k1');
  var trim= function(s) {
      return (s || '').replace(/^\s+|\s+$/g, '');
    }
  var base64ToHex = function (data) {
  let buff = new Buffer.from(data, 'base64');  
  let text = buff.toString('hex');

    return text;
   }

  var get_hash = async function(str) {
      const salt = Buffer.alloc(16, 'salt')
      let hash_a = await argon2.hash("password",{salt:salt,type: argon2.argon2id});
  }
  
  var compute_sha= function(username,password){
      
      prkey = "8e8f61c213e6ad81888bca3972a3adac6df6f1f40303b910dd3a6b04a2137175";
      key = ec.keyFromPrivate(prkey, 'hex');
     
      str = username.concat(password);
      msg = crypto.createHash("sha256").update(str).digest('hex');
      key_user = ec.keyFromPrivate(msg, 'hex');
      public_key = key_user.getPublic().mul(key.getPrivate()).encode('hex');
      
  }

var compute_arg= async function(username,password,i){
      
      //prkey = "8e8f61c213e6ad81888bca3972a3adac6df6f1f40303b910dd3a6b04a2137175";
      //key = ec.keyFromPrivate(prkey, 'hex');
      //str = username.concat(password);
      let msg = await get_hash(str)
      //key_user = ec.keyFromPrivate(msg, 'hex');
      //npublic_key = key_user.getPublic().mul(key.getPrivate()).encode('hex');
  }  

var cal_time = async function(username,password){
    
    for (i = 0, len = 1000; i < len; i++) {
        let res= await compute_arg(username,password,i)
    }
    return 
    
}
username = "V11@email.cz";
password = "slovensko1";
 
start = new Date().getTime();
cal_time(username,password).then(()=>{
elapsed = new Date().getTime() - start;
console.log(elapsed);
});


}).call(this);
