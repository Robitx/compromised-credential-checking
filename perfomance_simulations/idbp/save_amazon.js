// Generated by CoffeeScript 2.3.2
(function() {
  var EC, UserpassJson, crypto, ec, ecc, fs, readline, zlib;

  fs = require('fs');

  zlib = require('zlib');

  readline = require('readline');

  crypto = require('crypto');

  ecc = require('elliptic');

  EC = ecc.ec;

  ec = new EC('secp256k1');

  UserpassJson = class UserpassJson {
    constructor(filename) {
      this.get_hash_enc = this.get_hash_enc.bind(this);
      this.store_json = this.store_json.bind(this);
      this.print_ngram = this.print_ngram.bind(this);
      this.filename = filename;
      this.userpassdict = {};
      this.key = ec.genKeyPair();
      this.prkey = "5358f9d3079978e39e169c92208482926a469d934d97e0a84486ca01e86f142e";
      this.key = ec.keyFromPrivate(this.prkey, 'hex');
      this.lineReader = readline.createInterface({
        input: fs.createReadStream(this.filename)
      });
      this.writer = fs.createWriteStream('/hdd/c3s/data/userpass_5.txt', {
        flags: 'a'
      });
    }

    save_key() {
      return fs.writeFileSync('key_pr.txt', this.key.getPrivate('hex'));
    }

    trim(s) {
      return (s || '').replace(/^\s+|\s+$/g, '');
    }

    get_hash_enc(username, password) {
      var hash_prefix, key_user, msg, public_key, str;
      str = username.concat(password);
      msg = crypto.createHash("sha256").update(str).digest('hex');
      key_user = ec.keyFromPrivate(msg, 'hex');
      public_key = key_user.getPublic().mul(this.key.getPrivate()).encode('hex');
      hash_prefix = msg.slice(0, 4);
      return [hash_prefix, public_key];
    }

    store_json() {
      var i, startTime;
      i = 0;
      startTime = new Date();
      this.lineReader.on('line', (line) => {
        var data, data_toWrite, endTime, timeDiff, words;
        if (i % 1000000 === 0) {
          endTime = new Date();
          timeDiff = endTime - startTime;
          timeDiff /= 1000;
          console.log(timeDiff);
          console.log(i);
        }
        words = this.trim(line.toString()).split('\t');
        data = this.get_hash_enc(words[0], words[1]);
        data_toWrite = data[0].concat("\t").concat(data[1]).concat("\n");
        this.writer.write(data_toWrite);
        return i = i + 1;
      });
      return this.lineReader.on('close', () => {
        var endTime, timeDiff;
        endTime = new Date();
        timeDiff = endTime - startTime;
        timeDiff /= 1000;
        console.log(timeDiff);
        return console.log("done");
      });
    }

    print_ngram() {
      console.log("here");
      console.log(this.ngrams[123]);
      return console.log("done");
    }

  };

  module.exports = UserpassJson;

}).call(this);
