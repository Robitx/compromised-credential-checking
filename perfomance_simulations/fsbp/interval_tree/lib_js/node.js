// Generated by CoffeeScript 2.3.2
(function() {
  var Node, SortedList;

  SortedList = require('./sorted-list');

  /**
  node of IntervalTree, containing intervalsj

  @class Node
  @module interval-tree2
  */
  Node = class Node {
    /**
    @constructor
    @param {Number} center center of the node
    */
    constructor(center) {
      this.center = center;
      /**
      another node whose center is less than this.center

      @property {Node} left
      */
      this.left = null;
      /**
      another node whose center is greater than this.center

      @property {Node} right
      */
      this.right = null;
      /**
      sorted list of Intervals, sorting them by their start property

      @property {SortedList(Interval)} starts
      */
      this.starts = new SortedList('start');
      /**
      sorted list of Intervals, sorting them by their end property

      @property {SortedList(Interval)} ends
      */
      this.ends = new SortedList('end');
    }

    /**
    the number of intervals

    @method count
    @return {Number}
    */
    count() {
      return this.starts.length;
    }

    /**
    insert an interval

    @method insert
    @param {Interval} interval
    */
    insert(interval) {
      this.starts.insert(interval);
      return this.ends.insert(interval);
    }

    /**
    get intervals whose start position is less than or equal to the given value

    @method startPointSearch
    @param {Number} val
    @return {Array(Interval)}
    */
    startPointSearch(val) {
      var index;
      index = this.starts.lastPositionOf({
        start: val
      });
      return this.starts.slice(0, index + 1);
    }

    /**
    get intervals whose end position is more than or equal to the given value

    @method endPointSearch
    @param {Number} val
    @return {Array(Interval)}
    */
    endPointSearch(val) {
      var index;
      index = this.ends.firstPositionOf({
        end: val
      });
      return this.ends.slice(index);
    }

    /**
    gets all registered interval

    @method getAllIntervals
    @return {Array(Interval)}
    */
    getAllIntervals() {
      return this.starts.toArray();
    }

    /**
    remove the given interval

    @method remove
    @param {Interval} interval
    @param {SortedList} list
    */
    remove(interval) {
      this.removeFromList(interval, this.starts);
      return this.removeFromList(interval, this.ends);
    }

    /**
    remove the given interval from the given list

    @method removeFromList
    @private
    @param {Interval} interval
    @param {SortedList} list
    */
    removeFromList(interval, list) {
      var candidate, firstPos, i, idx, ref, ref1, results;
      firstPos = list.firstPositionOf(interval);
      results = [];
      for (idx = i = ref = firstPos, ref1 = list.length; (ref <= ref1 ? i < ref1 : i > ref1); idx = ref <= ref1 ? ++i : --i) {
        candidate = list[idx];
        if (candidate.id === interval.id) {
          list.remove(idx);
          break;
        } else {
          results.push(void 0);
        }
      }
      return results;
    }

  };

  module.exports = Node;

}).call(this);
