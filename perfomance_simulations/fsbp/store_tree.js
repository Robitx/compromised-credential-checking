// Generated by CoffeeScript 2.3.2
(function() {
  var IntervalTree, RangeTree, SortedList, Util, fs, readline, zlib;

  fs = require('fs');

  zlib = require('zlib');

  readline = require('readline');

  fs = require('fs');

  Util = require('/home/bijeeta/cloudfare/code_c3s/cloudworker/c3s/interval_tree/lib_js/util');

  SortedList = require('/home/bijeeta/cloudfare/code_c3s/cloudworker/c3s/interval_tree/lib_js/sorted-list');

  IntervalTree = require('/home/bijeeta/cloudfare/code_c3s/cloudworker/c3s/interval_tree/lib_js/interval-tree');

  RangeTree = class RangeTree {
    constructor(index) {
      this.store_json = this.store_json.bind(this);
      this.index = index;
      this.itree = new IntervalTree(2 ** 30);
      this.lineReader = readline.createInterface({
        //input: fs.createReadStream('/hdd/c3s/data/aws_data/interval_64_0.txt')
        input: fs.createReadStream('test_range.txt')
      });
      //this.writer = fs.createWriteStream('/hdd/c3s/data/aws_data/splits/intr_tree_lucy_0.txt', {
      //  flags: 'w'
      this.writer = fs.createWriteStream('test_tree.txt', {
        flags: 'w'
      });
    }

    trim(s) {
      return (s || '').replace(/^\s+|\s+$/g, '');
    }

    store_json() {
      var i, startTime;
      i = 0;
      startTime = new Date();
      this.lineReader.on('line', (line) => {
        var endTime, timeDiff, word;
        if (i % 100000 === 0) {
          endTime = new Date();
          timeDiff = endTime - startTime;
          timeDiff /= 1000;
          console.log(timeDiff);
          console.log(i);
        }
        word = this.trim(line.toString()).split('\t');
        if (word[1] !== word[2]) {
          this.itree.add(parseInt(word[1]), parseInt(word[2]), word[0]);
        }
        return i = i + 1;
      });
      return this.lineReader.on('close', () => {
        var data_toWrite, elem, endTime, ref, results, timeDiff, v;
        endTime = new Date();
        timeDiff = endTime - startTime;
        ref = this.itree.nodesByCenter;
        console.log(this.itree.nodesByCenter)
        results = [];
        for (elem in ref) {
          v = ref[elem];
          data_toWrite = elem.concat("\t").concat(v).concat("\n");
          results.push(this.writer.write(data_toWrite));
        }
        return results;
      });
    }

  };

  module.exports = RangeTree;

}).call(this);
